# Docker Compose configuration for LibraryApp

services:
  mssql-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql-db
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "User@123"
      MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    healthcheck:
      test: |
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "User@123" -Q "SELECT 1" -C -N || (echo "SQL Server not ready" >&2 && exit 1)
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 45s
    networks:
      - poc-network

  dotnet-mongo-db:
    image: mongo:latest
    container_name: dotnet-mongo-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    ports:
      - '27017:27017'
    healthcheck:
      test: ["CMD", "mongosh", "--eval \"db.adminCommand({ping:1})\" --quiet"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - poc-network

  dotnet-server:
    build:
      dockerfile: server.Dockerfile
      context: .
    image: dotnet-server
    container_name: dotnet-server
    depends_on:
      mssql-db:
        condition: service_healthy
      dotnet-mongo-db:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://dotnet-server:8080/healthz"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - poc-network

  blazor-client:
    build:
      dockerfile: client.Dockerfile
      context: .
    image: blazor-client
    container_name: blazor-client
    depends_on:
      dotnet-server:
        condition: service_healthy
    ports:
      - "8081:8080"
    networks:
      - poc-network

networks:
  poc-network:
    driver: bridge

